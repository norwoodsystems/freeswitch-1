version: "3"

services:
  # in a deployment, the freeswitch exe and the api need to be co-located. We fake that
  # here by giving the required volumes to both containers
  # freeswitch deposits in /opt/freeswitch/store
  # the api deposits in /tmp


  freeswitch-exe:
    image: 445735284876.dkr.ecr.us-west-1.amazonaws.com/frees:latest
#    env_file:
#      - .env-aws
    environment:
       - AWS_BUCKET=freeswitch-store-test
       - AWS_REGION=ap-southeast-2
       - AWS_ACCESS_ID=AKIAWPR7EWCGLB3UNPDH
       - AWS_SECRET_KEY=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
       - DOMAIN=192.168.33.162
       - FINN=http://192.168.33.162:3001
       - FREESWITCH=http://192.168.33.162:3000
       - AIDA=http://192.168.33.162:8085
       - AFFINITY=Freeswitch
       - GOOGLE_APPLICATION_CREDENTIALS=/usr/local/freeswitch/freeswitch-api-7867f30c80d7.json
       - PATH=/usr/local/freeswitch/bin:$PATH
    ports:
      - "5060:5060"
      - "5061:5061"
      - "5060:5060/udp"
      - "5061:5061/udp"
      - "5080:5080"
      - "5081:5081"
      - "5080:5080/udp"
      - "5081:5081/udp"
      - "6060:6060"
      - "6061:6061"
      - "6060:6060/udp"
      - "6061:6061/udp"
      - "16384-16394:16384-16394/udp"
      - "8080:8080"

    # command: freeswitch -nonat -conf /opt/freeswitch/conf -log /opt/freeswitch/log -db /opt/freeswitch/db -scripts /opt/freeswitch/scripts -storage /opt/freeswitch/store
#    command: freeswitch
    command:  freeswitch -nonat -conf /usr/local/freeswitch/conf -log /usr/local/freeswitch/log -db /usr/local/freeswitch/db -scripts /usr/local/freeswitch/scripts -storage /usr/local/freeswitch/store
    # depends_on:
    #   - web

  rabbitmq:
    image: rabbitmq:management
    command: rabbitmq-server
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmqctl eval '{ true, rabbit_app_booted_and_running } = { rabbit:is_booted(node()), rabbit_app_booted_and_running }, { [], no_alarms } = { rabbit:alarms(), no_alarms }, [] /= rabbit_networking:active_listeners(), rabbitmq_node_is_healthy.' || exit 1
      interval: 30s
      timeout: 10s
      retries: 3

  web:
#    <<: *freeswitch-defaults
    image: 445735284876.dkr.ecr.us-west-1.amazonaws.com/freeswitch-api:latest
    command: vendor/wait-for-it.sh -t 0 192.168.33.162:5672 -- bash -c "rm -f tmp/pids/server.pid && rails s -b 0.0.0.0"
    depends_on:
      - cassandra
      - rabbitmq
    ports:
      - "3000:3000" # api

  freeswitch_sneakers:
#    <<: *freeswitch-defaults
    image: 445735284876.dkr.ecr.us-west-1.amazonaws.com/freeswitch-api:latest
#    <<: *sneakers-command
    command: vendor/wait-for-it.sh -t 192.168.33.162:5672 -- bundle exec rails sneakers:run
    command: bundle exec rails sneakers:run

  cassandra:
    image: cassandra:3.11.3
    ports:
      - "9042:9042"
    environment:
      - "MAX_HEAP_SIZE=256M"
      - "HEAP_NEWSIZE=128M"
    restart: always
    volumes:
      - ../cassandra/cassandra_data:/var/lib/cassandra
    healthcheck:
      test: ["CMD", "cqlsh", "-u cassandra", "-p cassandra" ,"-e describe keyspaces"]
      interval: 15s
      timeout: 10s
      retries: 10


  app:
    image: 445735284876.dkr.ecr.us-west-1.amazonaws.com/aida-docker:latest
#    image: 445735284876.dkr.ecr.us-west-1.amazonaws.com/aida-docker@sha256:4123379a3d9c8a40ce947c1ca1882a052cf88f98048813801bf758d868883c9c
#    build:
#      context: .
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-debug}
    ports:
      - '8085:8085'
    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8085"]

